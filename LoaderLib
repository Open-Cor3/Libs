--[[
  OpenCore Loading Screen
  A sleek, animated loading screen with blue and green theme
  Inspired by Dex Loader UI with configurable settings
]]

local LoadingScreen = {}

local Settings = {
    Title = "OpenCore",
    Version = "v1.0.0",
    Subtitle = "Loading resources...",
    BackgroundColor = Color3.fromRGB(25, 25, 35),
    PrimaryColor = Color3.fromRGB(0, 150, 255),   -- Blue
    SecondaryColor = Color3.fromRGB(0, 200, 100), -- Green
    Font = Enum.Font.GothamSemibold,
    LoadingBarSpeed = 0.5,        -- Speed of the loading animation (lower = faster)
    AutoClose = true,             -- Automatically close when loading is complete
    Sounds = {
        Enabled = true,
        Background = "rbxassetid://6958727243", -- Ambient background music
        Complete = "rbxassetid://6895079853"    -- Sound when loading is complete
    },
    LoadingSteps = {
        "Initializing systems...",
        "Loading resources...",
        "Establishing connections...",
        "Preparing environment...",
        "Loading user interface...",
        "Finalizing setup...",
    }
}

-- Variables
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
local ScreenGui = nil
local LoadingMusic = nil
local CurrentStep = 0
local IsLoading = false

-- Animation settings
local TweenSettings = {
    Fast = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
    Medium = TweenInfo.new(0.6, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
    Slow = TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
    Loading = TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, -1, true)
}

-- Create the loading screen
function LoadingScreen:Create()
    if ScreenGui then return end
    
    -- Create ScreenGui
    ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "OpenCoreLoader"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.IgnoreGuiInset = true
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Parent = PlayerGui
    
    -- Main background
    local background = Instance.new("Frame")
    background.Name = "Background"
    background.Size = UDim2.new(1, 0, 1, 0)
    background.BackgroundColor3 = Settings.BackgroundColor
    background.BorderSizePixel = 0
    background.Parent = ScreenGui
    
    -- Create gradient background
    local gradientFrame = Instance.new("Frame")
    gradientFrame.Name = "GradientBackground"
    gradientFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    gradientFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    gradientFrame.Size = UDim2.new(1, 0, 1, 0)
    gradientFrame.BackgroundTransparency = 1
    gradientFrame.BorderSizePixel = 0
    gradientFrame.Parent = background
    
    -- Create pattern overlay
    local pattern = Instance.new("ImageLabel")
    pattern.Name = "PatternOverlay"
    pattern.Size = UDim2.new(1, 0, 1, 0)
    pattern.BackgroundTransparency = 1
    pattern.Image = "rbxassetid://6372755229"
    pattern.ImageColor3 = Settings.PrimaryColor
    pattern.ImageTransparency = 0.9
    pattern.ScaleType = Enum.ScaleType.Tile
    pattern.TileSize = UDim2.new(0, 300, 0, 300)
    pattern.Parent = background
    
    -- Animate the pattern
    local patternRotation = 0
    spawn(function()
        while ScreenGui and ScreenGui.Parent do
            patternRotation = patternRotation + 0.1
            pattern.Rotation = patternRotation
            wait(0.05)
        end
    end)
    
    -- Create container
    local container = Instance.new("Frame")
    container.Name = "Container"
    container.AnchorPoint = Vector2.new(0.5, 0.5)
    container.Position = UDim2.new(0.5, 0, 0.5, 0)
    container.Size = UDim2.new(0, 500, 0, 300)
    container.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    container.BackgroundTransparency = 0.1
    container.BorderSizePixel = 0
    container.Parent = background
    
    -- Add rounded corners to container
    local cornerRadius = Instance.new("UICorner")
    cornerRadius.CornerRadius = UDim.new(0, 8)
    cornerRadius.Parent = container
    
    -- Apply glass blur effect
    local blur = Instance.new("Frame")
    blur.Name = "BlurEffect"
    blur.Size = UDim2.new(1, 0, 1, 0)
    blur.BackgroundTransparency = 0.9
    blur.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    blur.BorderSizePixel = 0
    blur.Parent = container
    
    local blurCorner = Instance.new("UICorner")
    blurCorner.CornerRadius = UDim.new(0, 8)
    blurCorner.Parent = blur
    
    -- Create top gradient accent
    local topAccent = Instance.new("Frame")
    topAccent.Name = "TopAccent"
    topAccent.Size = UDim2.new(1, 0, 0, 4)
    topAccent.BorderSizePixel = 0
    topAccent.Parent = container
    
    local topGradient = Instance.new("UIGradient")
    topGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Settings.PrimaryColor),
        ColorSequenceKeypoint.new(1, Settings.SecondaryColor)
    })
    topGradient.Parent = topAccent
    
    -- Animate gradient
    spawn(function()
        local offset = 0
        while ScreenGui and ScreenGui.Parent do
            offset = (offset + 0.001) % 1
            topGradient.Offset = Vector2.new(offset, 0)
            wait()
        end
    end)
    
    -- Add rounded corners to top accent
    local accentCorner = Instance.new("UICorner")
    accentCorner.CornerRadius = UDim.new(0, 4)
    accentCorner.Parent = topAccent
    
    -- Create logo/icon
    local logoContainer = Instance.new("Frame")
    logoContainer.Name = "LogoContainer"
    logoContainer.Position = UDim2.new(0.5, 0, 0.2, 0)
    logoContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    logoContainer.Size = UDim2.new(0, 100, 0, 100)
    logoContainer.BackgroundTransparency = 1
    logoContainer.Parent = container
    
    local logo = Instance.new("Frame")
    logo.Name = "Logo"
    logo.AnchorPoint = Vector2.new(0.5, 0.5)
    logo.Position = UDim2.new(0.5, 0, 0.5, 0)
    logo.Size = UDim2.new(0.8, 0, 0.8, 0)
    logo.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    logo.BorderSizePixel = 0
    logo.Parent = logoContainer
    
    -- Add rounded corners to logo
    local logoCorner = Instance.new("UICorner")
    logoCorner.CornerRadius = UDim.new(0.5, 0)
    logoCorner.Parent = logo
    
    -- Add logo gradient
    local logoGradient = Instance.new("UIGradient")
    logoGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Settings.PrimaryColor),
        ColorSequenceKeypoint.new(1, Settings.SecondaryColor)
    })
    logoGradient.Rotation = 45
    logoGradient.Parent = logo
    
    -- Create a custom "OC" text inside the logo
    local logoText = Instance.new("TextLabel")
    logoText.Name = "LogoText"
    logoText.AnchorPoint = Vector2.new(0.5, 0.5)
    logoText.Position = UDim2.new(0.5, 0, 0.5, 0)
    logoText.Size = UDim2.new(1, 0, 1, 0)
    logoText.BackgroundTransparency = 1
    logoText.Font = Enum.Font.GothamBold
    logoText.Text = "OC"
    logoText.TextColor3 = Color3.fromRGB(255, 255, 255)
    logoText.TextSize = 40
    logoText.Parent = logo
    
    -- Glow effect for logo
    local glow = Instance.new("ImageLabel")
    glow.Name = "Glow"
    glow.AnchorPoint = Vector2.new(0.5, 0.5)
    glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    glow.Size = UDim2.new(1.5, 0, 1.5, 0)
    glow.BackgroundTransparency = 1
    glow.Image = "rbxassetid://5028857084"
    glow.ImageColor3 = Settings.PrimaryColor
    glow.ImageTransparency = 0.6
    glow.Parent = logoContainer
    
    -- Animate the glow
    local glowTween = TweenService:Create(
        glow,
        TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
        {Size = UDim2.new(1.8, 0, 1.8, 0), ImageTransparency = 0.7}
    )
    glowTween:Play()
    
    -- Create title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Position = UDim2.new(0.5, 0, 0.45, 0)
    title.AnchorPoint = Vector2.new(0.5, 0)
    title.Size = UDim2.new(0, 300, 0, 40)
    title.BackgroundTransparency = 1
    title.Font = Settings.Font
    title.Text = Settings.Title
    title.TextSize = 36
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Parent = container
    
    -- Create version text
    local version = Instance.new("TextLabel")
    version.Name = "Version"
    version.Position = UDim2.new(0.5, 75, 0.45, 12)
    version.AnchorPoint = Vector2.new(0, 0)
    version.Size = UDim2.new(0, 60, 0, 20)
    version.BackgroundTransparency = 1
    version.Font = Settings.Font
    version.Text = Settings.Version
    version.TextSize = 16
    version.TextColor3 = Settings.SecondaryColor
    version.Parent = container
    
    -- Create subtitle
    local subtitle = Instance.new("TextLabel")
    subtitle.Name = "Subtitle"
    subtitle.Position = UDim2.new(0.5, 0, 0.58, 0)
    subtitle.AnchorPoint = Vector2.new(0.5, 0)
    subtitle.Size = UDim2.new(0.8, 0, 0, 20)
    subtitle.BackgroundTransparency = 1
    subtitle.Font = Settings.Font
    subtitle.Text = Settings.Subtitle
    subtitle.TextSize = 18
    subtitle.TextColor3 = Color3.fromRGB(200, 200, 200)
    subtitle.TextTransparency = 0.2
    subtitle.Parent = container
    
    -- Create loading bar container
    local loadingBarContainer = Instance.new("Frame")
    loadingBarContainer.Name = "LoadingBarContainer"
    loadingBarContainer.Position = UDim2.new(0.5, 0, 0.7, 0)
    loadingBarContainer.AnchorPoint = Vector2.new(0.5, 0)
    loadingBarContainer.Size = UDim2.new(0.8, 0, 0, 10)
    loadingBarContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    loadingBarContainer.BorderSizePixel = 0
    loadingBarContainer.Parent = container
    
    -- Add rounded corners to loading bar container
    local loadingBarContainerCorner = Instance.new("UICorner")
    loadingBarContainerCorner.CornerRadius = UDim.new(0, 5)
    loadingBarContainerCorner.Parent = loadingBarContainer
    
    -- Create loading bar
    local loadingBar = Instance.new("Frame")
    loadingBar.Name = "LoadingBar"
    loadingBar.Size = UDim2.new(0, 0, 1, 0)
    loadingBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    loadingBar.BorderSizePixel = 0
    loadingBar.Parent = loadingBarContainer
    
    -- Add rounded corners to loading bar
    local loadingBarCorner = Instance.new("UICorner")
    loadingBarCorner.CornerRadius = UDim.new(0, 5)
    loadingBarCorner.Parent = loadingBar
    
    -- Add gradient to loading bar
    local loadingBarGradient = Instance.new("UIGradient")
    loadingBarGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Settings.PrimaryColor),
        ColorSequenceKeypoint.new(1, Settings.SecondaryColor)
    })
    loadingBarGradient.Parent = loadingBar
    
    -- Animate loading bar gradient
    spawn(function()
        local offset = 0
        while ScreenGui and ScreenGui.Parent do
            offset = (offset + 0.005) % 1
            loadingBarGradient.Offset = Vector2.new(offset, 0)
            wait()
        end
    end)
    
    -- Create loading text
    local loadingText = Instance.new("TextLabel")
    loadingText.Name = "LoadingText"
    loadingText.Position = UDim2.new(0.5, 0, 0.78, 0)
    loadingText.AnchorPoint = Vector2.new(0.5, 0)
    loadingText.Size = UDim2.new(0.8, 0, 0, 20)
    loadingText.BackgroundTransparency = 1
    loadingText.Font = Settings.Font
    loadingText.Text = "Initializing..."
    loadingText.TextSize = 16
    loadingText.TextColor3 = Color3.fromRGB(180, 180, 180)
    loadingText.Parent = container
    
    -- Create background particles
    for i = 1, 30 do
        local particle = Instance.new("Frame")
        particle.Name = "Particle" .. i
        particle.Size = UDim2.new(0, math.random(2, 5), 0, math.random(2, 5))
        particle.Position = UDim2.new(math.random(), 0, math.random(), 0)
        particle.BackgroundColor3 = (math.random() > 0.5) and Settings.PrimaryColor or Settings.SecondaryColor
        particle.BackgroundTransparency = math.random(0.7, 0.9)
        particle.BorderSizePixel = 0
        particle.ZIndex = 0
        particle.Parent = background
        
        -- Add rounded corners to particles
        local particleCorner = Instance.new("UICorner")
        particleCorner.CornerRadius = UDim.new(1, 0)
        particleCorner.Parent = particle
        
        -- Animate particles
        spawn(function()
            while ScreenGui and ScreenGui.Parent do
                -- Random movement
                local randomX = math.random(-50, 50) / 1000
                local randomY = math.random(-50, 50) / 1000
                local randomDuration = math.random(2, 5)
                
                local particleTween = TweenService:Create(
                    particle,
                    TweenInfo.new(randomDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                    {Position = UDim2.new(math.clamp(particle.Position.X.Scale + randomX, 0, 1), 0, 
                                         math.clamp(particle.Position.Y.Scale + randomY, 0, 1), 0)}
                )
                particleTween:Play()
                wait(randomDuration - 0.1)
            end
        end)
    end
    
    -- Initialize background music
    if Settings.Sounds.Enabled and Settings.Sounds.Background then
        LoadingMusic = Instance.new("Sound")
        LoadingMusic.SoundId = Settings.Sounds.Background
        LoadingMusic.Volume = 0.5
        LoadingMusic.Looped = true
        LoadingMusic.Parent = ScreenGui
        LoadingMusic:Play()
    end
    
    -- Store UI components
    self.UI = {
        ScreenGui = ScreenGui,
        Container = container,
        LoadingBar = loadingBar,
        LoadingText = loadingText,
        Subtitle = subtitle
    }
    
    -- Initial animation
    container.Size = UDim2.new(0, 0, 0, 0)
    container.BackgroundTransparency = 1
    
    local containerTween = TweenService:Create(container, TweenSettings.Medium, {
        Size = UDim2.new(0, 500, 0, 300),
        BackgroundTransparency = 0.1
    })
    containerTween:Play()
    
    return self
end

-- Start the loading process
function LoadingScreen:Start()
    if not self.UI then
        self:Create()
    end
    
    IsLoading = true
    CurrentStep = 0
    
    -- Reset loading bar
    self.UI.LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    
    -- Process loading steps
    spawn(function()
        for i, step in ipairs(Settings.LoadingSteps) do
            CurrentStep = i
            local progress = i / #Settings.LoadingSteps
            self.UI.LoadingText.Text = step
            
            -- Update loading bar
            local barTween = TweenService:Create(self.UI.LoadingBar, 
                TweenInfo.new(Settings.LoadingBarSpeed, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
                {Size = UDim2.new(progress, 0, 1, 0)}
            )
            barTween:Play()
            
            -- Wait between steps (simulates loading)
            wait(Settings.LoadingBarSpeed * 2)
        end
        
        -- Complete loading
        self:Complete()
    end)
    
    return self
end

-- Complete the loading process
function LoadingScreen:Complete()
    if not self.UI then return end
    
    IsLoading = false
    
    -- Update UI
    self.UI.LoadingText.Text = "Loading complete!"
    self.UI.Subtitle.Text = "Ready to launch"
    
    -- Final loading bar animation
    local barTween = TweenService:Create(self.UI.LoadingBar, TweenSettings.Fast, {
        Size = UDim2.new(1, 0, 1, 0)
    })
    barTween:Play()
    
    -- Play completion sound
    if Settings.Sounds.Enabled and Settings.Sounds.Complete then
        local completeSound = Instance.new("Sound")
        completeSound.SoundId = Settings.Sounds.Complete
        completeSound.Volume = 0.7
        completeSound.Parent = self.UI.ScreenGui
        completeSound:Play()
    end
    
    -- Auto close if enabled
    if Settings.AutoClose then
        wait(1.5)
        self:Close()
    end
    
    return self
end

-- Manually update loading progress
function LoadingScreen:SetProgress(progress, text)
    if not self.UI then return self end
    
    progress = math.clamp(progress, 0, 1)
    
    -- Update UI
    local barTween = TweenService:Create(self.UI.LoadingBar, TweenSettings.Fast, {
        Size = UDim2.new(progress, 0, 1, 0)
    })
    barTween:Play()
    
    if text then
        self.UI.LoadingText.Text = text
    end
    
    return self
end

-- Close the loading screen
function LoadingScreen:Close()
    if not self.UI then return end
    
    -- Stop music
    if LoadingMusic then
        LoadingMusic:Stop()
        LoadingMusic:Destroy()
        LoadingMusic = nil
    end
    
    -- Close animation
    local containerTween = TweenService:Create(self.UI.Container, TweenSettings.Medium, {
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1
    })
    containerTween:Play()
    
    -- Remove after animation
    containerTween.Completed:Connect(function()
        if self.UI.ScreenGui then
            self.UI.ScreenGui:Destroy()
            self.UI = nil
        end
    end)
    
    return self
end

-- Example usage:
--[[
-- Load the UI
local loader = LoadingScreen:Create()

-- Start the loading process
loader:Start()

-- You can also manually control the progress:
-- loader:SetProgress(0.5, "Loading assets...")

-- When loading is complete:
-- loader:Complete()

-- To manually close:
-- loader:Close()
]]

return LoadingScreen
