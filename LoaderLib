--[[
  Compact OpenCore Loading Module
  A sleek, animated loading interface that sits in the center of the screen
  Maintains the blue/green aesthetic in a more modular design
]]

local CompactLoader = {}

local Settings = {
    Title = "OpenCore",
    Version = "v1.0.0",
    BackgroundColor = Color3.fromRGB(25, 25, 35),
    PrimaryColor = Color3.fromRGB(0, 150, 255),   -- Blue
    SecondaryColor = Color3.fromRGB(0, 200, 100), -- Green
    Font = Enum.Font.GothamSemibold,
    LoadingBarSpeed = 0.3,        -- Speed of the loading animation (lower = faster)
    AutoClose = true,             -- Automatically close when loading is complete
    Sounds = {
        Enabled = true,
        Complete = "rbxassetid://6895079853"    -- Sound when loading is complete
    },
    -- Animation for dots when loading
    UseLoadingDots = true
}

-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
local ScreenGui = nil

-- Animation settings
local TweenInfo = {
    Fast = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
    Medium = TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
    Pulse = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
}

-- Create the compact loader
function CompactLoader:Create()
    if ScreenGui then return end
    
    -- Create ScreenGui with transparency
    ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "CompactLoader"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Parent = PlayerGui
    
    -- Semi-transparent background
    local background = Instance.new("Frame")
    background.Name = "Background"
    background.Size = UDim2.new(1, 0, 1, 0)
    background.BackgroundColor3 = Color3.new(0, 0, 0)
    background.BackgroundTransparency = 0.7
    background.BorderSizePixel = 0
    background.Parent = ScreenGui
    
    -- Center container
    local container = Instance.new("Frame")
    container.Name = "Container"
    container.AnchorPoint = Vector2.new(0.5, 0.5)
    container.Position = UDim2.new(0.5, 0, 0.5, 0)
    container.Size = UDim2.new(0, 280, 0, 140)
    container.BackgroundColor3 = Settings.BackgroundColor
    container.BorderSizePixel = 0
    container.Parent = ScreenGui
    
    -- Rounded corners
    local cornerRadius = Instance.new("UICorner")
    cornerRadius.CornerRadius = UDim.new(0, 10)
    cornerRadius.Parent = container
    
    -- Add a subtle shadow
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(1, 20, 1, 20)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://5028857084"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.6
    shadow.ZIndex = -1
    shadow.Parent = container
    
    -- Top gradient accent
    local topAccent = Instance.new("Frame")
    topAccent.Name = "TopAccent"
    topAccent.Size = UDim2.new(1, 0, 0, 3)
    topAccent.BorderSizePixel = 0
    topAccent.Parent = container
    
    local topGradient = Instance.new("UIGradient")
    topGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Settings.PrimaryColor),
        ColorSequenceKeypoint.new(1, Settings.SecondaryColor)
    })
    topGradient.Parent = topAccent
    
    -- Animate gradient
    spawn(function()
        local offset = 0
        while ScreenGui and ScreenGui.Parent do
            offset = (offset + 0.001) % 1
            topGradient.Offset = Vector2.new(offset, 0)
            wait()
        end
    end)
    
    -- Logo
    local logoContainer = Instance.new("Frame")
    logoContainer.Name = "LogoContainer"
    logoContainer.Position = UDim2.new(0.15, 0, 0.5, 0)
    logoContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    logoContainer.Size = UDim2.new(0, 50, 0, 50)
    logoContainer.BackgroundTransparency = 1
    logoContainer.Parent = container
    
    local logo = Instance.new("Frame")
    logo.Name = "Logo"
    logo.AnchorPoint = Vector2.new(0.5, 0.5)
    logo.Position = UDim2.new(0.5, 0, 0.5, 0)
    logo.Size = UDim2.new(0.8, 0, 0.8, 0)
    logo.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    logo.BorderSizePixel = 0
    logo.Parent = logoContainer
    
    -- Rounded logo
    local logoCorner = Instance.new("UICorner")
    logoCorner.CornerRadius = UDim.new(0.5, 0)
    logoCorner.Parent = logo
    
    -- Logo gradient
    local logoGradient = Instance.new("UIGradient")
    logoGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Settings.PrimaryColor),
        ColorSequenceKeypoint.new(1, Settings.SecondaryColor)
    })
    logoGradient.Rotation = 45
    logoGradient.Parent = logo
    
    -- "OC" text in logo
    local logoText = Instance.new("TextLabel")
    logoText.Name = "LogoText"
    logoText.AnchorPoint = Vector2.new(0.5, 0.5)
    logoText.Position = UDim2.new(0.5, 0, 0.5, 0)
    logoText.Size = UDim2.new(1, 0, 1, 0)
    logoText.BackgroundTransparency = 1
    logoText.Font = Enum.Font.GothamBold
    logoText.Text = "OC"
    logoText.TextColor3 = Color3.fromRGB(255, 255, 255)
    logoText.TextSize = 20
    logoText.Parent = logo
    
    -- Subtle glow for logo
    local glow = Instance.new("ImageLabel")
    glow.Name = "Glow"
    glow.AnchorPoint = Vector2.new(0.5, 0.5)
    glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    glow.Size = UDim2.new(1.5, 0, 1.5, 0)
    glow.BackgroundTransparency = 1
    glow.Image = "rbxassetid://5028857084"
    glow.ImageColor3 = Settings.PrimaryColor
    glow.ImageTransparency = 0.6
    glow.Parent = logoContainer
    
    -- Pulse animation for glow
    local glowTween = TweenService:Create(
        glow,
        TweenInfo.Pulse,
        {Size = UDim2.new(1.8, 0, 1.8, 0), ImageTransparency = 0.7}
    )
    glowTween:Play()
    
    -- Title and info container (right side)
    local infoContainer = Instance.new("Frame")
    infoContainer.Name = "InfoContainer"
    infoContainer.Position = UDim2.new(0.6, 0, 0.35, 0)
    infoContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    infoContainer.Size = UDim2.new(0.6, 0, 0.5, 0)
    infoContainer.BackgroundTransparency = 1
    infoContainer.Parent = container
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Position = UDim2.new(0, 0, 0, 0)
    title.Size = UDim2.new(1, 0, 0, 24)
    title.BackgroundTransparency = 1
    title.Font = Settings.Font
    title.Text = Settings.Title
    title.TextSize = 24
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Parent = infoContainer
    
    -- Version
    local version = Instance.new("TextLabel")
    version.Name = "Version"
    version.Position = UDim2.new(0, 2, 0, 24)
    version.Size = UDim2.new(1, 0, 0, 16)
    version.BackgroundTransparency = 1
    version.Font = Settings.Font
    version.Text = Settings.Version
    version.TextSize = 14
    version.TextXAlignment = Enum.TextXAlignment.Left
    version.TextColor3 = Settings.SecondaryColor
    version.Parent = infoContainer
    
    -- Loading bar container
    local loadingBarContainer = Instance.new("Frame")
    loadingBarContainer.Name = "LoadingBarContainer"
    loadingBarContainer.Position = UDim2.new(0.5, 0, 0.8, 0)
    loadingBarContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    loadingBarContainer.Size = UDim2.new(0.85, 0, 0, 6)
    loadingBarContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    loadingBarContainer.BorderSizePixel = 0
    loadingBarContainer.Parent = container
    
    -- Loading bar container rounded corners
    local loadingBarContainerCorner = Instance.new("UICorner")
    loadingBarContainerCorner.CornerRadius = UDim.new(0, 3)
    loadingBarContainerCorner.Parent = loadingBarContainer
    
    -- Loading bar
    local loadingBar = Instance.new("Frame")
    loadingBar.Name = "LoadingBar"
    loadingBar.Size = UDim2.new(0, 0, 1, 0)
    loadingBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    loadingBar.BorderSizePixel = 0
    loadingBar.Parent = loadingBarContainer
    
    -- Loading bar rounded corners
    local loadingBarCorner = Instance.new("UICorner")
    loadingBarCorner.CornerRadius = UDim.new(0, 3)
    loadingBarCorner.Parent = loadingBar
    
    -- Loading bar gradient
    local loadingBarGradient = Instance.new("UIGradient")
    loadingBarGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Settings.PrimaryColor),
        ColorSequenceKeypoint.new(1, Settings.SecondaryColor)
    })
    loadingBarGradient.Parent = loadingBar
    
    -- Animate loading bar gradient
    spawn(function()
        local offset = 0
        while ScreenGui and ScreenGui.Parent do
            offset = (offset + 0.008) % 1
            loadingBarGradient.Offset = Vector2.new(offset, 0)
            wait()
        end
    end)
    
    -- Loading text
    local loadingText = Instance.new("TextLabel")
    loadingText.Name = "LoadingText"
    loadingText.Position = UDim2.new(0.5, 0, 0.92, 0)
    loadingText.AnchorPoint = Vector2.new(0.5, 0.5)
    loadingText.Size = UDim2.new(0.85, 0, 0, 18)
    loadingText.BackgroundTransparency = 1
    loadingText.Font = Settings.Font
    loadingText.Text = "Loading..."
    loadingText.TextSize = 14
    loadingText.TextColor3 = Color3.fromRGB(180, 180, 180)
    loadingText.Parent = container
    
    -- Animate loading dots if enabled
    if Settings.UseLoadingDots then
        spawn(function()
            local dots = {"", ".", "..", "..."}
            local dotIndex = 1
            while ScreenGui and ScreenGui.Parent and loadingText.Text:find("Loading") do
                loadingText.Text = "Loading" .. dots[dotIndex]
                dotIndex = (dotIndex % #dots) + 1
                wait(0.3)
            end
        end)
    end
    
    -- Initial entrance animation
    container.Position = UDim2.new(0.5, 0, 0.45, 0)
    container.Size = UDim2.new(0, 0, 0, 0)
    container.BackgroundTransparency = 1
    background.BackgroundTransparency = 1
    
    -- Animate entrance
    local bgTween = TweenService:Create(background, TweenInfo.Medium, {
        BackgroundTransparency = 0.7
    })
    
    local containerTween = TweenService:Create(container, TweenInfo.Medium, {
        Size = UDim2.new(0, 280, 0, 140),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        BackgroundTransparency = 0
    })
    
    bgTween:Play()
    containerTween:Play()
    
    -- Store UI components
    self.UI = {
        ScreenGui = ScreenGui,
        Container = container,
        Background = background,
        LoadingBar = loadingBar,
        LoadingText = loadingText
    }
    
    return self
end

-- Start the loading process with auto progress
function CompactLoader:Start(duration)
    if not self.UI then
        self:Create()
    end
    
    duration = duration or 3 -- Default loading time in seconds
    
    -- Reset loading bar
    self.UI.LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    
    -- Animate loading bar
    local barTween = TweenService:Create(self.UI.LoadingBar, 
        TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),
        {Size = UDim2.new(1, 0, 1, 0)}
    )
    barTween:Play()
    
    -- Auto complete
    spawn(function()
        wait(duration)
        self:Complete()
    end)
    
    return self
end

-- Manually set progress
function CompactLoader:SetProgress(progress, text)
    if not self.UI then return self end
    
    progress = math.clamp(progress, 0, 1)
    
    -- Update UI
    local barTween = TweenService:Create(self.UI.LoadingBar, TweenInfo.Fast, {
        Size = UDim2.new(progress, 0, 1, 0)
    })
    barTween:Play()
    
    if text then
        self.UI.LoadingText.Text = text
    end
    
    return self
end

-- Complete loading
function CompactLoader:Complete()
    if not self.UI then return self end
    
    -- Update UI
    self.UI.LoadingText.Text = "Complete!"
    local barTween = TweenService:Create(self.UI.LoadingBar, TweenInfo.Fast, {
        Size = UDim2.new(1, 0, 1, 0)
    })
    barTween:Play()
    
    -- Play completion sound
    if Settings.Sounds.Enabled and Settings.Sounds.Complete then
        local completeSound = Instance.new("Sound")
        completeSound.SoundId = Settings.Sounds.Complete
        completeSound.Volume = 0.7
        completeSound.Parent = self.UI.ScreenGui
        completeSound:Play()
    end
    
    -- Auto close if enabled
    if Settings.AutoClose then
        wait(1.2)
        self:Close()
    end
    
    return self
end

-- Close the loader
function CompactLoader:Close()
    if not self.UI then return self end
    
    -- Exit animation
    local bgTween = TweenService:Create(self.UI.Background, TweenInfo.Medium, {
        BackgroundTransparency = 1
    })
    
    local containerTween = TweenService:Create(self.UI.Container, TweenInfo.Medium, {
        Size = UDim2.new(0, 0, 0, 0),
        Position = UDim2.new(0.5, 0, 0.45, 0),
        BackgroundTransparency = 1
    })
    
    bgTween:Play()
    containerTween:Play()
    
    -- Clean up
    spawn(function()
        wait(0.5)
        if self.UI.ScreenGui then
            self.UI.ScreenGui:Destroy()
            self.UI = nil
        end
    end)
    
    return self
end

-- Example usage:
--[[
-- Create and show the loader
local loader = CompactLoader:Create()

-- Start with auto progress (takes 3 seconds by default)
loader:Start()

-- OR manually control progress:
-- loader:Start() -- Initialize first
-- wait(0.5)
-- loader:SetProgress(0.3, "Loading assets...")
-- wait(0.5)
-- loader:SetProgress(0.7, "Finalizing...")
-- wait(0.5)
-- loader:Complete()

-- To manually close:
-- loader:Close()
]]

return CompactLoader
